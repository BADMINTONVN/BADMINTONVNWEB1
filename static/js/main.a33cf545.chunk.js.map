{"version":3,"sources":["store/actions/actionTypes.js","store/reducers/appReducer.js","store/reducers/adminReducer.js","store/reducers/rootReducer.js","redux.js","hoc/authentication.js","utils/constant.js","utils/KeyCodeUtils.js","utils/LanguageUtils.js","components/CustomScrollbars.js","components/CustomToast.js","routes/Home.js","assets/images/user.svg","assets/images/pass.svg","axios.js","services/adminService.js","routes/Login.js","store/actions/adminActions.js","components/Navigator.js","containers/Header/menuApp.js","containers/Header/Header.js","containers/System/UserManage.js","containers/System/ProductManage.js","containers/System/RegisterPackageGroupOrAcc.js","routes/System.js","components/ConfirmModal.js","store/actions/appActions.js","containers/App.js","serviceWorker.js","hoc/IntlProviderWrapper.js","index.js"],"names":["actionTypes","Object","freeze","APP_START_UP_COMPLETE","SET_CONTENT_OF_CONFIRM_MODAL","ADMIN_LOGIN_SUCCESS","ADMIN_LOGIN_FAIL","PROCESS_LOGOUT","ADD_USER_SUCCESS","initialState","started","language","systemMenuPath","contentOfConfirmModal","isOpen","messageId","handleFunc","dataFunc","appReducer","state","action","type","isLoggedIn","adminInfo","persistCommonConfig","storage","stateReconciler","autoMergeLevel2","adminPersistConfig","key","whitelist","history","createBrowserHistory","basename","process","reduxStateSyncConfig","rootReducer","combineReducers","router","connectRouter","admin","persistReducer","adminReducer","user","userReducer","app","middleware","routerMiddleware","thunkMiddleware","createStateSyncMiddleware","composeEnhancers","compose","reduxStore","createStore","applyMiddleware","persistor","dispatch","persistStore","locationHelper","locationHelperBuilder","userIsAuthenticated","connectedRouterRedirect","authenticatedSelector","wrapperDisplayName","redirectPath","userIsNotAuthenticated","ownProps","getRedirectQueryParam","allowRedirectBack","path","KeyCodeUtils","e","UP","DOWN","TAB","ENTER","E","ESCAPE","flattenMessages","nestedMessages","prefix","keys","reduce","messages","value","prefixedKey","assign","messages_vi","messages_en","LanguageUtils","lang","CustomScrollbars","ref","React","createRef","getScrollLeft","current","getScrollTop","scrollToBottom","targetScrollTop","getScrollHeight","scrollTo","targetTop","quickScroll","props","scrollbars","originalTop","iteration","scroll","scrollTop","setTimeout","renderTrackHorizontal","className","renderTrackVertical","renderThumbHorizontal","renderThumbVertical","renderNone","this","disableVerticalScroll","disableHorizontalScroll","children","otherProps","autoHide","autoHideTimeout","hideTracksWhenNotNeeded","Component","CustomToastCloseButton","onClick","closeToast","Home","linkToRedirect","to","connect","instance","axios","create","baseURL","withCredentials","createError","httpStatusCode","statusCode","errorMessage","problems","errorCode","error","Error","interceptors","response","use","data","hasOwnProperty","s","statusType","toUpperCase","isSuccessStatusCode","Promise","reject","status","_","length","adminService","login","loginBody","post","Login","username","password","loginError","refresh","setState","onUsernameChange","target","onPasswordChange","redirectToSystemPage","navigate","processLogin","adminLoginSuccess","adminLoginFail","console","log","handlerKeyDown","event","which","keyCode","preventDefault","btnLogin","disabled","click","document","addEventListener","removeEventListener","callback","id","src","userIcon","alt","placeholder","getMessageByKey","name","onChange","passIcon","push","actions","MenuGroup","Menu","active","link","hasSubMenu","onLinkClick","data-toggle","aria-expanded","SubMenu","getItemClass","location","pathname","MenuGroupWithRouter","withRouter","MenuWithRouter","SubMenuWithRouter","Navigator","expandedMenu","toggle","groupIndex","menuIndex","isMenuHasSubMenuActive","subMenus","currentPath","i","checkActiveMenu","menus","outerLoop","group","j","menu","prevProps","prevState","map","isSubMenuOpen","subMenu","subMenuIndex","closeOtherExpand","withRouterInnerRef","WrappedComponent","InnerComponentWithRef","forwardRef","rest","ComponentWithRef","withRef","adminMenu","Header","processLogout","UserManage","ProductManage","RegisterPackageGroupOrAcc","System","component","ConfirmModal","acceptBtnRef","onAcceptBtnClick","onClose","setContentOfConfirmModal","Modal","centered","App","handlePersistorState","getState","bootstrapped","onBeforeLift","resolve","then","catch","exact","toastClassName","bodyClassName","autoClose","hideProgressBar","pauseOnHover","pauseOnFocusLoss","closeOnClick","draggable","closeButton","Boolean","window","hostname","match","getFlattenedMessages","IntlProviderWrapper","locale","defaultLocale","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a33cf545.chunk.js","sourcesContent":["const actionTypes = Object.freeze({\r\n    //app\r\n    APP_START_UP_COMPLETE: 'APP_START_UP_COMPLETE',\r\n    SET_CONTENT_OF_CONFIRM_MODAL: 'SET_CONTENT_OF_CONFIRM_MODAL',\r\n\r\n    //admin\r\n    ADMIN_LOGIN_SUCCESS: 'ADMIN_LOGIN_SUCCESS',\r\n    ADMIN_LOGIN_FAIL: 'ADMIN_LOGIN_FAIL',\r\n    PROCESS_LOGOUT: 'PROCESS_LOGOUT',\r\n\r\n    //user\r\n    ADD_USER_SUCCESS: 'ADD_USER_SUCCESS',\r\n})\r\n\r\nexport default actionTypes;","import actionTypes from '../actions/actionTypes';\r\n\r\nconst initContentOfConfirmModal = {\r\n    isOpen: false,\r\n    messageId: \"\",\r\n    handleFunc: null,\r\n    dataFunc: null\r\n}\r\n\r\nconst initialState = {\r\n    started: true,\r\n    language: 'vi',\r\n    systemMenuPath: '/system/user-manage',\r\n    contentOfConfirmModal: {\r\n        ...initContentOfConfirmModal\r\n    }\r\n}\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.APP_START_UP_COMPLETE: \r\n            return {\r\n                ...state,\r\n                started: true\r\n            }\r\n        case actionTypes.SET_CONTENT_OF_CONFIRM_MODAL: \r\n            return {\r\n                ...state,\r\n                contentOfConfirmModal: {\r\n                    ...state.contentOfConfirmModal,\r\n                    ...action.contentOfConfirmModal\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default appReducer;","import actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    adminInfo: null\r\n}\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADMIN_LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: true,\r\n                adminInfo: action.adminInfo\r\n            }\r\n        case actionTypes.ADMIN_LOGIN_FAIL:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                adminInfo: null\r\n            }\r\n        case actionTypes.PROCESS_LOGOUT:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                adminInfo: null\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default appReducer;","import {combineReducers} from 'redux';\r\nimport { connectRouter } from 'connected-react-router';\r\n\r\nimport appReducer from \"./appReducer\";\r\nimport adminReducer from \"./adminReducer\";\r\nimport userReducer from \"./userReducer\";\r\n\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { persistReducer } from 'redux-persist';\r\n\r\nconst persistCommonConfig = {\r\n    storage: storage,\r\n    stateReconciler: autoMergeLevel2,\r\n};\r\n\r\nconst adminPersistConfig = {\r\n    ...persistCommonConfig,\r\n    key: 'admin',\r\n    whitelist: ['isLoggedIn', 'adminInfo']\r\n};\r\n\r\nexport default (history) => combineReducers({\r\n    router: connectRouter(history),\r\n    admin: persistReducer(adminPersistConfig, adminReducer),\r\n    user: userReducer,\r\n    app: appReducer\r\n})","import { logger } from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { routerMiddleware } from 'connected-react-router';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { createStateSyncMiddleware } from 'redux-state-sync';\r\nimport { persistStore } from 'redux-persist';\r\n\r\nimport createRootReducer from './store/reducers/rootReducer';\r\nimport actionTypes from './store/actions/actionTypes';\r\n\r\nconst environment = process.env.NODE_ENV || \"development\";\r\nlet isDevelopment = environment === \"development\";\r\n\r\n//hide redux logs\r\nisDevelopment = false;\r\n\r\n\r\nexport const history = createBrowserHistory({ basename: process.env.REACT_APP_ROUTER_BASE_NAME });\r\n\r\nconst reduxStateSyncConfig = {\r\n    whitelist: [\r\n        actionTypes.APP_START_UP_COMPLETE,\r\n    ]\r\n}\r\n\r\nconst rootReducer = createRootReducer(history);\r\nconst middleware = [\r\n    routerMiddleware(history),\r\n    thunkMiddleware,\r\n    createStateSyncMiddleware(reduxStateSyncConfig),\r\n]\r\nif (isDevelopment) middleware.push(logger);\r\n\r\nconst composeEnhancers = (isDevelopment && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : compose;\r\n\r\nconst reduxStore = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(...middleware)),\r\n)\r\n\r\nexport const dispatch = reduxStore.dispatch;\r\n\r\nexport const persistor = persistStore(reduxStore);\r\n\r\nexport default reduxStore;","import locationHelperBuilder from \"redux-auth-wrapper/history4/locationHelper\";\r\nimport { connectedRouterRedirect } from \"redux-auth-wrapper/history4/redirect\";\r\n\r\nconst locationHelper = locationHelperBuilder({});\r\n\r\nexport const userIsAuthenticated = connectedRouterRedirect({\r\n    authenticatedSelector: state => state.admin.isLoggedIn,\r\n    wrapperDisplayName: 'UserIsAuthenticated',\r\n    redirectPath: '/login'\r\n});\r\n\r\nexport const userIsNotAuthenticated = connectedRouterRedirect({\r\n    // Want to redirect the user when they are authenticated\r\n    authenticatedSelector: state => !state.admin.isLoggedIn,\r\n    wrapperDisplayName: 'UserIsNotAuthenticated',\r\n    redirectPath: (state, ownProps) => locationHelper.getRedirectQueryParam(ownProps) || '/',\r\n    allowRedirectBack: false\r\n});","export const path = {\r\n    HOME: '/',\r\n    LOGIN: '/login',\r\n    LOG_OUT: '/logout',\r\n    SYSTEM: '/system'\r\n};\r\n\r\nexport const languages = {\r\n    VI: 'vi',\r\n    EN: 'en'\r\n};\r\n\r\nexport const manageActions = {\r\n    ADD: \"ADD\",\r\n    EDIT: \"EDIT\",\r\n    DELETE: \"DELETE\"\r\n};\r\n\r\nexport const dateFormat = {\r\n    SEND_TO_SERVER: 'DD/MM/YYYY'\r\n};\r\n\r\nexport const YesNoObj = {\r\n    YES: 'Y',\r\n    NO: 'N'\r\n}","class KeyCodeUtils {\r\n\r\n    static UP = 38;\r\n\r\n    static DOWN = 40;\r\n\r\n    static TAB = 9;\r\n\r\n    static ENTER = 13;\r\n\r\n    static E = 69;\r\n\r\n    static ESCAPE = 27; \r\n\r\n    static isNavigation(e) {\r\n        return (e >= 33 && e <= 40) || e === 9 || e === 8 || e === 46 || e === 14 || e === 13;\r\n    }\r\n\r\n    static isNumeric(e) {\r\n        return (e >= 48 && e <= 57) || (e >= 96 && e <= 105);\r\n    }\r\n    static isAlphabetic(e) {\r\n        return (e >= 65 && e <= 90);\r\n    }\r\n    static isDecimal(e) {\r\n        return e === 190 || e === 188 || e === 108 || e === 110;\r\n    }\r\n\r\n    static isDash(e) {\r\n        return e === 109 || e === 189;\r\n    }\r\n}\r\n\r\nexport default KeyCodeUtils;","import messages_vi from '../translations/vi.json';\r\nimport messages_en from '../translations/en.json';\r\n\r\nconst flattenMessages = ((nestedMessages, prefix = '') => {\r\n    if (nestedMessages == null) {\r\n        return {}\r\n    }\r\n    return Object.keys(nestedMessages).reduce((messages, key) => {\r\n        const value = nestedMessages[key];\r\n        const prefixedKey = prefix ? `${prefix}.${key}` : key;\r\n\r\n        if (typeof value === 'string') {\r\n            Object.assign(messages, {[prefixedKey]: value})\r\n        } else {\r\n            Object.assign(messages, flattenMessages(value, prefixedKey))\r\n        }\r\n\r\n        return messages\r\n    }, {})\r\n});\r\n\r\nconst messages = {\r\n    'vi': flattenMessages(messages_vi),\r\n    'en': flattenMessages(messages_en),\r\n};\r\n\r\nexport default class LanguageUtils {\r\n    static getMessageByKey(key, lang) {\r\n        return messages[lang][key]\r\n    }\r\n\r\n    static getFlattenedMessages() {\r\n        return messages;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nimport './CustomScrollbars.scss';\r\n\r\nclass CustomScrollbars extends Component {\r\n\r\n    ref = React.createRef();\r\n\r\n    getScrollLeft =()=>{\r\n        const scrollbars = this.ref.current;\r\n        return scrollbars.getScrollLeft();\r\n    }\r\n    getScrollTop =()=>{\r\n        const scrollbars = this.ref.current;\r\n        return scrollbars.getScrollTop();\r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        if (!this.ref || !this.ref.current) {\r\n            return;\r\n        }\r\n        const scrollbars = this.ref.current;\r\n        const targetScrollTop = scrollbars.getScrollHeight();\r\n        this.scrollTo(targetScrollTop);\r\n    };\r\n\r\n    scrollTo = (targetTop) => {\r\n        const { quickScroll } = this.props;\r\n        if (!this.ref || !this.ref.current) {\r\n            return;\r\n        }\r\n        const scrollbars = this.ref.current;\r\n        const originalTop = scrollbars.getScrollTop();\r\n        let iteration = 0;\r\n\r\n        const scroll = () => {\r\n            iteration++;\r\n            if (iteration > 30) {\r\n                return;\r\n            }\r\n            scrollbars.scrollTop(originalTop + (targetTop - originalTop) / 30 * iteration);\r\n\r\n            if (quickScroll && quickScroll === true) {\r\n                scroll();\r\n            } else {\r\n                setTimeout(() => {\r\n                    scroll();\r\n                }, 20);\r\n            }\r\n        };\r\n\r\n        scroll();\r\n    };\r\n\r\n    renderTrackHorizontal = (props) => {\r\n        return (\r\n            <div {...props} className=\"track-horizontal\" />\r\n        );\r\n    };\r\n\r\n    renderTrackVertical = (props) => {\r\n        return (\r\n            <div {...props} className=\"track-vertical\" />\r\n        );\r\n    };\r\n\r\n    renderThumbHorizontal = (props) => {\r\n        return (\r\n            <div {...props} className=\"thumb-horizontal\" />\r\n        );\r\n    };\r\n\r\n    renderThumbVertical = (props) => {\r\n        return (\r\n            <div {...props} className=\"thumb-vertical\" />\r\n        );\r\n    };\r\n\r\n    renderNone = (props) => {\r\n        return (\r\n            <div />\r\n        );\r\n    };\r\n\r\n    render() {\r\n        const { className, disableVerticalScroll, disableHorizontalScroll, children,...otherProps } = this.props;\r\n        return (\r\n            <Scrollbars\r\n                ref={this.ref}\r\n                autoHide={true}\r\n                autoHideTimeout={200}\r\n                hideTracksWhenNotNeeded={true}\r\n                className={className ? className + ' custom-scrollbar' : 'custom-scrollbar'}\r\n                {...otherProps}\r\n                renderTrackHorizontal={disableHorizontalScroll ? this.renderNone : this.renderTrackHorizontal}\r\n                renderTrackVertical={disableVerticalScroll ? this.renderNone : this.renderTrackVertical}\r\n                renderThumbHorizontal={disableHorizontalScroll ? this.renderNone : this.renderThumbHorizontal}\r\n                renderThumbVertical={disableVerticalScroll ? this.renderNone : this.renderThumbVertical}\r\n            >\r\n                {children}\r\n            </Scrollbars>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CustomScrollbars;","import React, { Component, Fragment } from 'react';\r\nimport { FormattedMessage, FormattedTime } from 'react-intl';\r\n\r\nimport CustomScrollBar from '../components/CustomScrollbars';\r\n\r\nimport './CustomToast.scss';\r\n\r\nclass CustomToast extends Component {\r\n\r\n    render() {\r\n        const { titleId, message, messageId, time } = this.props;\r\n        return (\r\n            <Fragment>\r\n                <div className=\"custom-toast\">\r\n                    <div className=\"toast-title\">\r\n                        {time && (\r\n                            <span className=\"date\">\r\n                                <FormattedTime hour='numeric' minute='numeric' second='numeric' hour12={true} value={time} />\r\n                            </span>\r\n                        )}\r\n                        <i className=\"fa fa-fw fa-exclamation-triangle\" />\r\n                        <FormattedMessage id={titleId} />\r\n                    </div>\r\n                    {\r\n                        (message && typeof message === 'object') ?\r\n                            <CustomScrollBar autoHeight={true} autoHeightMin={50} autoHeightMax={100}>\r\n                                {\r\n                                    message.map((msg, index) => {\r\n                                        return (\r\n                                            <Fragment key={index}>\r\n                                                <div className=\"toast-content\">{msg}</div>\r\n                                            </Fragment>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </CustomScrollBar> :\r\n                            <div className=\"toast-content\">\r\n                                {message ? message : (messageId ? (<FormattedMessage id={messageId} />) : null)}\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport class CustomToastCloseButton extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <button type=\"button\" className=\"toast-close\" onClick={this.props.closeToast}>\r\n                <i className=\"fa fa-fw fa-times-circle\" />\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CustomToast;","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Home extends Component {\r\n\r\n    render() {\r\n        const { isLoggedIn } = this.props;\r\n        let linkToRedirect = isLoggedIn ? '/system/user-manage' : '/login';\r\n\r\n        return (\r\n            <Redirect to={linkToRedirect} />\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.admin.isLoggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","export default __webpack_public_path__ + \"static/media/user.82ea1694.svg\";","export default __webpack_public_path__ + \"static/media/pass.2590675e.svg\";","import axios from 'axios';\r\nimport _ from 'lodash';\r\nimport config from './config';\r\n\r\nconst instance = axios.create({\r\n    baseURL: process.env.REACT_APP_BACKEND_URL,\r\n    withCredentials: true\r\n});\r\n\r\nconst createError = (httpStatusCode, statusCode, errorMessage, problems, errorCode = '') => {\r\n    const error = new Error();\r\n    error.httpStatusCode = httpStatusCode;\r\n    error.statusCode = statusCode;\r\n    error.errorMessage = errorMessage;\r\n    error.problems = problems;\r\n    error.errorCode = errorCode + \"\";\r\n    return error;\r\n};\r\n\r\nexport const isSuccessStatusCode = (s) => {\r\n    // May be string or number\r\n    const statusType = typeof s;\r\n    return (statusType === 'number' && s === 0) || (statusType === 'string' && s.toUpperCase() === 'OK');\r\n};\r\n\r\ninstance.interceptors.response.use(\r\n    (response) => {\r\n        // Thrown error for request with OK status code\r\n        const { data } = response;\r\n        if (data.hasOwnProperty('s') && !isSuccessStatusCode(data['s']) && data.hasOwnProperty('errmsg')) {\r\n            return Promise.reject(createError(response.status, data['s'], data['errmsg'], null, data['errcode'] ? data['errcode'] : \"\"));\r\n        }\r\n\r\n        // Return direct data to callback\r\n        if (data.hasOwnProperty('s') && data.hasOwnProperty('d')) {\r\n            return data['d'];\r\n        }\r\n        // Handle special case\r\n        if (data.hasOwnProperty('s') && _.keys(data).length === 1) {\r\n            return null;\r\n        }\r\n        return response.data;\r\n    },\r\n    (error) => {\r\n        const { response } = error;\r\n        if (response == null) {\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        const { data } = response;\r\n\r\n        if (data.hasOwnProperty('s') && data.hasOwnProperty('errmsg')) {\r\n            return Promise.reject(createError(response.status, data['s'], data['errmsg']));\r\n        }\r\n\r\n        if (data.hasOwnProperty('code') && data.hasOwnProperty('message')) {\r\n            return Promise.reject(createError(response.status, data['code'], data['message'], data['problems']));\r\n        }\r\n\r\n        return Promise.reject(createError(response.status));\r\n    }\r\n);\r\n\r\nexport default instance;\r\n","import axios from '../axios';\r\nimport * as queryString from 'query-string';\r\n\r\nconst adminService = {\r\n\r\n    /**\r\n     * Đăng nhập hệ thống\r\n     * {\r\n     *  \"username\": \"string\",\r\n     *  \"password\": \"string\"\r\n     * }\r\n     */\r\n    login(loginBody) {\r\n        return axios.post(`/admin/login`, loginBody)\r\n    },\r\n\r\n};\r\n\r\nexport default adminService;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { push } from \"connected-react-router\";\r\n\r\nimport * as actions from \"../store/actions\";\r\nimport { KeyCodeUtils, LanguageUtils } from \"../utils\";\r\n\r\nimport userIcon from '../../src/assets/images/user.svg';\r\nimport passIcon from '../../src/assets/images/pass.svg';\r\nimport './Login.scss';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nimport adminService from '../services/adminService';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.btnLogin = React.createRef();\r\n    }\r\n\r\n    initialState = {\r\n        username: '',\r\n        password: '',\r\n        loginError: ''\r\n    }\r\n\r\n    state = {\r\n        ...this.initialState\r\n    };\r\n\r\n    refresh = () => {\r\n        this.setState({\r\n            ...this.initialState\r\n        })\r\n    }\r\n\r\n    onUsernameChange = (e) => {\r\n        this.setState({ username: e.target.value })\r\n    }\r\n\r\n    onPasswordChange = (e) => {\r\n        this.setState({ password: e.target.value })\r\n    }\r\n\r\n    redirectToSystemPage = () => {\r\n        const { navigate } = this.props;\r\n        const redirectPath = '/system/user-manage';\r\n        navigate(`${redirectPath}`);\r\n    }\r\n\r\n    processLogin = () => {\r\n        const { username, password } = this.state;\r\n\r\n        const { adminLoginSuccess, adminLoginFail } = this.props;\r\n        let loginBody = {\r\n            username: 'admin',\r\n            password: '123456'\r\n        }\r\n        //sucess\r\n        let adminInfo = {\r\n            \"tlid\": \"0\",\r\n            \"tlfullname\": \"Administrator\",\r\n            \"custype\": \"A\",\r\n            \"accessToken\": \"eyJhbGciOiJIU\"\r\n        }\r\n\r\n        adminLoginSuccess(adminInfo);\r\n        this.refresh();\r\n        this.redirectToSystemPage();\r\n        try {\r\n            adminService.login(loginBody)\r\n        } catch (e) {\r\n            console.log('error login : ', e)\r\n        }\r\n\r\n    }\r\n\r\n    handlerKeyDown = (event) => {\r\n        const keyCode = event.which || event.keyCode;\r\n        if (keyCode === KeyCodeUtils.ENTER) {\r\n            event.preventDefault();\r\n            if (!this.btnLogin.current || this.btnLogin.current.disabled) return;\r\n            this.btnLogin.current.click();\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown', this.handlerKeyDown);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('keydown', this.handlerKeyDown);\r\n        // fix Warning: Can't perform a React state update on an unmounted component\r\n        this.setState = (state, callback) => {\r\n            return;\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { username, password, loginError } = this.state;\r\n        const { lang } = this.props;\r\n\r\n        return (\r\n            <div className=\"login-wrapper\">\r\n                <div className=\"login-container\">\r\n                    <div className=\"form_login\">\r\n                        <h2 className=\"title\">\r\n                            <FormattedMessage id=\"login.login\" />\r\n                        </h2>\r\n                        <div className=\"form-group icon-true\">\r\n                            <img className=\"icon\" src={userIcon} alt=\"this\" />\r\n                            <input\r\n                                placeholder={LanguageUtils.getMessageByKey(\"login.username\", lang)}\r\n                                id=\"username\"\r\n                                name=\"username\"\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                value={username}\r\n                                onChange={this.onUsernameChange}\r\n                            />\r\n                        </div>\r\n\r\n                        <div id=\"phone-input-container\" className=\"form-group icon-true\">\r\n                            <img className=\"icon\" src={passIcon} alt=\"this\" />\r\n                            <input\r\n                                placeholder={LanguageUtils.getMessageByKey(\"login.password\", lang)}\r\n                                id=\"password\"\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                value={password}\r\n                                onChange={this.onPasswordChange}\r\n                            />\r\n                        </div>\r\n\r\n                        {loginError !== '' && (\r\n                            <div className='login-error'>\r\n                                <span className='login-error-message'>{loginError}</span>\r\n                            </div>\r\n                        )}\r\n\r\n                        <div className=\"form-group login\">\r\n                            <input\r\n                                ref={this.btnLogin}\r\n                                id=\"btnLogin\"\r\n                                type=\"submit\"\r\n                                className=\"btn\"\r\n                                value={LanguageUtils.getMessageByKey(\"login.login\", lang)}\r\n                                onClick={this.processLogin}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        lang: state.app.language\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        navigate: (path) => dispatch(push(path)),\r\n        adminLoginSuccess: (adminInfo) => dispatch(actions.adminLoginSuccess(adminInfo)),\r\n        adminLoginFail: () => dispatch(actions.adminLoginFail()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import actionTypes from './actionTypes';\r\n\r\nexport const adminLoginSuccess = (adminInfo) => ({\r\n    type: actionTypes.ADMIN_LOGIN_SUCCESS,\r\n    adminInfo: adminInfo\r\n})\r\n\r\nexport const adminLoginFail = () => ({\r\n    type: actionTypes.ADMIN_LOGIN_FAIL\r\n})\r\n\r\nexport const processLogout = () => ({\r\n    type: actionTypes.PROCESS_LOGOUT\r\n})","import React, { Component, Fragment } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './Navigator.scss';\r\n\r\nclass MenuGroup extends Component {\r\n\r\n    render() {\r\n        const { name, children } = this.props;\r\n        return (\r\n            <li className=\"menu-group\">\r\n                <div className=\"menu-group-name\">\r\n                    <FormattedMessage id={name} />\r\n                </div>\r\n                <ul className=\"menu-list list-unstyled\">\r\n                    {children}\r\n                </ul>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nclass Menu extends Component {\r\n\r\n    render() {\r\n        const { name, active, link, children, onClick, hasSubMenu, onLinkClick } = this.props;\r\n        return (\r\n            <li className={\"menu\" + (hasSubMenu ? \" has-sub-menu\" : \"\") + (\"\") + (active ? \" active\" : \"\")}>\r\n                {hasSubMenu ? (\r\n                    <Fragment>\r\n                        <span\r\n                            data-toggle=\"collapse\"\r\n                            className={\"menu-link collapsed\"}\r\n                            onClick={onClick}\r\n                            aria-expanded={\"false\"}\r\n                        >\r\n                            <FormattedMessage id={name} />\r\n                            <div className=\"icon-right\">\r\n                                <i className={\"far fa-angle-right\"} />\r\n                            </div>\r\n                        </span>\r\n                        <div>\r\n                            <ul className=\"sub-menu-list list-unstyled\">\r\n                                {children}\r\n                            </ul>\r\n                        </div>\r\n                    </Fragment>\r\n                ) : (\r\n                        <Link to={link} className=\"menu-link\" onClick={onLinkClick}>\r\n                            <FormattedMessage id={name} />\r\n                        </Link>\r\n                    )}\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nclass SubMenu extends Component {\r\n\r\n    getItemClass = path => {\r\n        return this.props.location.pathname === path ? \"active\" : \"\";\r\n    };\r\n\r\n    render() {\r\n        const { name, link, onLinkClick } = this.props;\r\n        return (\r\n            <li className={\"sub-menu \" + this.getItemClass(link)}>\r\n                <Link to={link} className=\"sub-menu-link\" onClick={onLinkClick}>\r\n                    <FormattedMessage id={name} />\r\n                </Link>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nconst MenuGroupWithRouter = withRouter(MenuGroup);\r\nconst MenuWithRouter = withRouter(Menu);\r\nconst SubMenuWithRouter = withRouter(SubMenu);\r\n\r\nconst withRouterInnerRef = (WrappedComponent) => {\r\n\r\n    class InnerComponentWithRef extends React.Component {\r\n        render() {\r\n            const { forwardRef, ...rest } = this.props;\r\n            return <WrappedComponent {...rest} ref={forwardRef} />;\r\n        }\r\n    }\r\n\r\n    const ComponentWithRef = withRouter(InnerComponentWithRef, { withRef: true });\r\n\r\n    return React.forwardRef((props, ref) => {\r\n        return <ComponentWithRef {...props} forwardRef={ref} />;\r\n    });\r\n};\r\n\r\nclass Navigator extends Component {\r\n    state = {\r\n        expandedMenu: {}\r\n    };\r\n\r\n    toggle = (groupIndex, menuIndex) => {\r\n        const expandedMenu = {};\r\n        const needExpand = !(this.state.expandedMenu[groupIndex + '_' + menuIndex] === true);\r\n        if (needExpand) {\r\n            expandedMenu[groupIndex + '_' + menuIndex] = true;\r\n        }\r\n\r\n        this.setState({\r\n            expandedMenu: expandedMenu\r\n        });\r\n    };\r\n\r\n    isMenuHasSubMenuActive = (location, subMenus, link) => {\r\n        if (subMenus) {\r\n            if (subMenus.length === 0) {\r\n                return false;\r\n            }\r\n\r\n            const currentPath = location.pathname;\r\n            for (let i = 0; i < subMenus.length; i++) {\r\n                const subMenu = subMenus[i];\r\n                if (subMenu.link === currentPath) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (link) {\r\n            return this.props.location.pathname === link;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    checkActiveMenu = () => {\r\n        const { menus, location } = this.props;\r\n        outerLoop:\r\n        for (let i = 0; i < menus.length; i++) {\r\n            const group = menus[i];\r\n            if (group.menus && group.menus.length > 0) {\r\n                for (let j = 0; j < group.menus.length; j++) {\r\n                    const menu = group.menus[j];\r\n                    if (menu.subMenus && menu.subMenus.length > 0) {\r\n                        if (this.isMenuHasSubMenuActive(location, menu.subMenus, null)) {\r\n                            const key = i + '_' + j;\r\n                            this.setState({\r\n                                expandedMenu: {\r\n                                    [key]: true\r\n                                }\r\n                            });\r\n                            break outerLoop;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.checkActiveMenu();\r\n    };\r\n\r\n    // componentWillReceiveProps(nextProps, prevState) {\r\n    //     const { location, setAccountMenuPath, setSettingMenuPath } = this.props;\r\n    //     const { location: nextLocation } = nextProps;\r\n    //     if (location !== nextLocation) {\r\n    //         let pathname = nextLocation && nextLocation.pathname;\r\n    //         if ((pathname.startsWith('/account/') || pathname.startsWith('/fds/account/'))) {\r\n    //             setAccountMenuPath(pathname);\r\n    //         }\r\n    //         if (pathname.startsWith('/settings/')) {\r\n    //             setSettingMenuPath(pathname);\r\n    //         };\r\n    //     };\r\n    // };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { location } = this.props;\r\n        const { location: prevLocation } = prevProps;\r\n        if (location !== prevLocation) {\r\n            this.checkActiveMenu();\r\n        };\r\n    };\r\n\r\n    render() {\r\n        const { menus, location, onLinkClick } = this.props;\r\n        return (\r\n            <Fragment>\r\n                <ul className=\"navigator-menu list-unstyled\">\r\n                    {\r\n                        menus.map((group, groupIndex) => {\r\n                            return (\r\n                                <Fragment key={groupIndex}>\r\n                                    <MenuGroupWithRouter name={group.name}>\r\n                                        {group.menus ? (\r\n                                            group.menus.map((menu, menuIndex) => {\r\n                                                const isMenuHasSubMenuActive = this.isMenuHasSubMenuActive(location, menu.subMenus, menu.link);\r\n                                                const isSubMenuOpen = this.state.expandedMenu[groupIndex + '_' + menuIndex] === true;\r\n                                                return (\r\n                                                    <MenuWithRouter\r\n                                                        key={menuIndex}\r\n                                                        active={isMenuHasSubMenuActive}\r\n                                                        name={menu.name}\r\n                                                        link={menu.link}\r\n                                                        hasSubMenu={menu.subMenus}\r\n                                                        isOpen={isSubMenuOpen}\r\n                                                        onClick={() => this.toggle(groupIndex, menuIndex)}\r\n                                                        onLinkClick={onLinkClick}\r\n                                                    >\r\n                                                        {menu.subMenus && menu.subMenus.map((subMenu, subMenuIndex) => (\r\n                                                            <SubMenuWithRouter\r\n                                                                key={subMenuIndex}\r\n                                                                name={subMenu.name}\r\n                                                                link={subMenu.link}\r\n                                                                onClick={this.closeOtherExpand}\r\n                                                                onLinkClick={onLinkClick}\r\n                                                            />\r\n                                                        ))}\r\n                                                    </MenuWithRouter>\r\n                                                );\r\n                                            })\r\n                                        ) : null}\r\n                                    </MenuGroupWithRouter>\r\n                                </Fragment>\r\n                            );\r\n                        })\r\n                    }\r\n                </ul>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default withRouterInnerRef(connect(mapStateToProps, mapDispatchToProps)(Navigator));\r\n","export const adminMenu = [\r\n    { //hệ thống\r\n        name: 'menu.system.header', menus: [\r\n            {\r\n                name: 'menu.system.system-administrator.header',\r\n                subMenus: [\r\n                    { name: 'menu.system.system-administrator.user-manage', link: '/system/user-manage' },\r\n                    { name: 'menu.system.system-administrator.product-manage', link: '/system/product-manage' },\r\n                    { name: 'menu.system.system-administrator.register-package-group-or-account', link: '/system/register-package-group-or-account' },\r\n                ]\r\n            },\r\n            // { name: 'menu.system.system-parameter.header', link: '/system/system-parameter' },\r\n        ]\r\n    },\r\n];","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport * as actions from \"../../store/actions\";\r\nimport Navigator from '../../components/Navigator';\r\nimport { adminMenu } from './menuApp';\r\nimport './Header.scss';\r\n\r\nclass Header extends Component {\r\n\r\n    render() {\r\n        const { processLogout } = this.props;\r\n\r\n        return (\r\n            <div className=\"header-container\">\r\n                {/* thanh navigator */}\r\n                <div className=\"header-tabs-container\">\r\n                    <Navigator menus={adminMenu} />\r\n                </div>\r\n\r\n                {/* nút logout */}\r\n                <div className=\"btn btn-logout\" onClick={processLogout}>\r\n                    <i className=\"fas fa-sign-out-alt\"></i>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.admin.isLoggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        processLogout: () => dispatch(actions.processLogout()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nclass UserManage extends Component {\r\n\r\n    state = {\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-center\">Manage users</div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManage);\r\n","import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nclass ProductManage extends Component {\r\n\r\n    state = {\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-center\" >Manage products</div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductManage);\r\n","import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nclass RegisterPackageGroupOrAcc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-center\">\r\n                register package group or account\r\n            </div>)\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterPackageGroupOrAcc);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport UserManage from '../containers/System/UserManage';\r\nimport ProductManage from '../containers/System/ProductManage';\r\nimport RegisterPackageGroupOrAcc from '../containers/System/RegisterPackageGroupOrAcc';\r\n\r\nclass System extends Component {\r\n    render() {\r\n        const { systemMenuPath } = this.props;\r\n        return (\r\n            <div className=\"system-container\">\r\n                <div className=\"system-list\">\r\n                    <Switch>\r\n                        <Route path=\"/system/user-manage\" component={UserManage} />\r\n                        <Route path=\"/system/product-manage\" component={ProductManage} />\r\n                        <Route path=\"/system/register-package-group-or-account\" component={RegisterPackageGroupOrAcc} />\r\n                        <Route component={() => { return (<Redirect to={systemMenuPath} />) }} />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        systemMenuPath: state.app.systemMenuPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(System);\r\n","import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { Modal } from 'reactstrap';\r\n\r\nimport './ConfirmModal.scss';\r\nimport * as actions from \"../store/actions\";\r\nimport { KeyCodeUtils } from \"../utils\";\r\n\r\nclass ConfirmModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.acceptBtnRef = React.createRef();\r\n    }\r\n\r\n    initialState = {\r\n    };\r\n\r\n    state = {\r\n        ...this.initialState\r\n    };\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown', this.handlerKeyDown);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('keydown', this.handlerKeyDown);\r\n    }\r\n\r\n    handlerKeyDown = (event) => {\r\n        const keyCode = event.which || event.keyCode;\r\n        if (keyCode === KeyCodeUtils.ENTER) {\r\n            if (!this.acceptBtnRef.current || this.acceptBtnRef.current.disabled) return;\r\n            this.acceptBtnRef.current.click();\r\n        }\r\n    }\r\n\r\n    onAcceptBtnClick = () => {\r\n        const { contentOfConfirmModal } = this.props;\r\n        if (contentOfConfirmModal.handleFunc) {\r\n            contentOfConfirmModal.handleFunc(contentOfConfirmModal.dataFunc);\r\n        }\r\n        this.onClose();\r\n    }\r\n\r\n    onClose = () => {\r\n        this.props.setContentOfConfirmModal({\r\n            isOpen: false,\r\n            messageId: \"\",\r\n            handleFunc: null,\r\n            dataFunc: null\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { contentOfConfirmModal } = this.props;\r\n\r\n        return (\r\n            <Modal isOpen={contentOfConfirmModal.isOpen} className='confirm-modal' centered={true}>\r\n                <div className=\"modal-header\">\r\n                    <div className=\"modal-title\">\r\n                        <FormattedMessage id={\"common.confirm\"} />\r\n                    </div>\r\n                    <div className=\"col-auto\">\r\n                        <button className=\"btn btn-close\" onClick={this.onClose}>\r\n                            <i className=\"fal fa-times\" />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"modal-body\">\r\n                    <div className=\"confirm-modal-content\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <FormattedMessage id={contentOfConfirmModal.messageId ? contentOfConfirmModal.messageId : \"common.confirm-this-task\"} />\r\n                            </div>\r\n\r\n                            <hr />\r\n\r\n                            <div className=\"col-12\">\r\n                                <div className=\"btn-container text-center\">\r\n                                    <button className=\"btn btn-add\" onClick={this.onClose} >\r\n                                        <FormattedMessage id=\"common.close\" />\r\n                                    </button>\r\n                                    <button ref={this.acceptBtnRef} className=\"btn btn-add\" onClick={this.onAcceptBtnClick}>\r\n                                        <FormattedMessage id={\"common.accept\"} />\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Modal >\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        lang: state.app.language,\r\n        contentOfConfirmModal: state.app.contentOfConfirmModal\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setContentOfConfirmModal: (contentOfConfirmModal) => dispatch(actions.setContentOfConfirmModal(contentOfConfirmModal))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmModal);\r\n","import actionTypes from './actionTypes';\r\n\r\nexport const appStartUpComplete = () => ({\r\n    type: actionTypes.APP_START_UP_COMPLETE\r\n});\r\n\r\nexport const setContentOfConfirmModal = (contentOfConfirmModal) => ({\r\n    type: actionTypes.SET_CONTENT_OF_CONFIRM_MODAL,\r\n    contentOfConfirmModal: contentOfConfirmModal\r\n});","import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { ConnectedRouter as Router } from 'connected-react-router';\r\nimport { history } from '../redux'\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\n\r\nimport { userIsAuthenticated, userIsNotAuthenticated } from '../hoc/authentication';\r\n\r\nimport { path } from '../utils'\r\n\r\nimport Home from '../routes/Home';\r\nimport Login from '../routes/Login';\r\nimport Header from './Header/Header';\r\nimport System from '../routes/System';\r\n\r\nimport { CustomToastCloseButton } from '../components/CustomToast';\r\nimport ConfirmModal from '../components/ConfirmModal';\r\n\r\nclass App extends Component {\r\n\r\n    handlePersistorState = () => {\r\n        const { persistor } = this.props;\r\n        let { bootstrapped } = persistor.getState();\r\n        if (bootstrapped) {\r\n            if (this.props.onBeforeLift) {\r\n                Promise.resolve(this.props.onBeforeLift())\r\n                    .then(() => this.setState({ bootstrapped: true }))\r\n                    .catch(() => this.setState({ bootstrapped: true }));\r\n            } else {\r\n                this.setState({ bootstrapped: true });\r\n            }\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.handlePersistorState();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Router history={history}>\r\n                    <div className=\"main-container\">\r\n                        <ConfirmModal />\r\n                        {this.props.isLoggedIn && <Header />}\r\n\r\n                        <span className=\"content-container\">\r\n                            <Switch>\r\n                                <Route path={path.HOME} exact component={(Home)} />\r\n                                <Route path={path.LOGIN} component={userIsNotAuthenticated(Login)} />\r\n                                <Route path={path.SYSTEM} component={userIsAuthenticated(System)} />\r\n                            </Switch>\r\n                        </span>\r\n\r\n                        <ToastContainer\r\n                            className=\"toast-container\" toastClassName=\"toast-item\" bodyClassName=\"toast-item-body\"\r\n                            autoClose={false} hideProgressBar={true} pauseOnHover={false}\r\n                            pauseOnFocusLoss={true} closeOnClick={false} draggable={false}\r\n                            closeButton={<CustomToastCloseButton />}\r\n                        />\r\n                    </div>\r\n                </Router>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        started: state.app.started,\r\n        isLoggedIn: state.admin.isLoggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { IntlProvider } from \"react-intl\";\r\n\r\nimport '@formatjs/intl-pluralrules/polyfill';\r\nimport '@formatjs/intl-pluralrules/locale-data/en';\r\nimport '@formatjs/intl-pluralrules/locale-data/vi';\r\n\r\nimport '@formatjs/intl-relativetimeformat/polyfill';\r\nimport '@formatjs/intl-relativetimeformat/locale-data/en';\r\nimport '@formatjs/intl-relativetimeformat/locale-data/vi';\r\n\r\nimport { LanguageUtils } from '../utils'\r\n\r\nconst messages = LanguageUtils.getFlattenedMessages();\r\n\r\nclass IntlProviderWrapper extends Component {\r\n\r\n    render() {\r\n        const { children, language } = this.props;\r\n        return (\r\n            <IntlProvider\r\n                locale={language}\r\n                messages={messages[language]}\r\n                defaultLocale=\"vi\">\r\n                {children}\r\n            </IntlProvider>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(IntlProviderWrapper);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './styles/styles.scss';\r\n\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport IntlProviderWrapper from \"./hoc/IntlProviderWrapper\";\r\n\r\n\r\nimport { Provider } from 'react-redux';\r\nimport reduxStore, { persistor } from './redux';\r\n\r\nconst renderApp = () => {\r\n    ReactDOM.render(\r\n        <Provider store={reduxStore}>\r\n            <IntlProviderWrapper>\r\n                <App persistor={persistor}/>\r\n            </IntlProviderWrapper>\r\n        </Provider>,\r\n        document.getElementById('root')\r\n    );\r\n};\r\n\r\nrenderApp();\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}